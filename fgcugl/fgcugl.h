// file: fgcugl.h
// 
// Copyright (c) 2021 Paul Allen
// 
// This code is licensed under MIT license (see LICENSE for details)
// 
// 2D graphics library built on OpenGL and Glew
// --------------------------------------------------------
#include <string>

#include <GL/glew.h>
#include <GLFW/glfw3.h>

#ifndef FGCUGL_H
#define FGCUGL_H

namespace fgcugl
{
	enum Color {
		Black = 0x000000,
		White = 0xFFFFFF,
		Red = 0xFF0000,
		Lime = 0x00FF00,
		Blue = 0x0000FF,
		Yellow = 0xFFFF00,
		Cyan = 0x00FFFF,
		Magenta = 0xFF00FF,
		Silver = 0xC0C0C0,
		Gray = 0x808080,
		Maroon = 0x800000,
		Olive = 0x808000,
		Orange = 0xFFA500,
		Green = 0x008000,
		Purple = 0x800080,
		Teal = 0x008080,
		Navy = 0x000080
	};

	/**
	 Initialize a new OpenGL window
	 Parameters:
		width - width of the window in pixels
		height - height of the window in pixels
		title - text to display in window titlebar
	 Returns:
		void
	*/
	void openWindow(int width, int height, std::string title, bool resizable = true);

	/**
	 Returns true if the OpenGL window is closing
	 Returns:
		bool - true if closing
	*/
	bool windowClosing();
	/**
	 Performs double buffering of window painting so 
	 changes are written to one buffer while the other
	 is being drawn, and swaps the buffers when called.
	 Returns:
		void
	*/
	void windowPaint();

	/**
	 Get's current program execution time in best possible precision, 
	 typically nano or micro seconds
	 Returns:
		double	- amount of time since program began execution
	*/
	double getTime();

	/**
	 Returns ASCII charcter code for key pressed. 

	 Can only return 1 key code, order of precedence is:
		ESC,X,W,S,A,D,UP(W),DOWN(S),LEFT(A),RIGHT(D),NONE

	 Returns:
		unsigned char - ASCII key code or 0 (null)
	*/
	unsigned char getKey();

	/**
	* Check for system events like keyboard input or window closing
	 Returns:
		void
	*/
	void getEvents();

	/**
	* cleanup and exit the OpenGL environment
	 Returns:
		void
	*/
	void cleanup();

	/**
	 Draw a 4 sided filled block
	 Parameters:
		x		- left side coordinate
		y		- bottom coordinate
		width	- in pixels
		height	- in pixels
		color	- fill color (default=White)
	 Returns:
		void
	*/
	void drawQuad(float x, float y, float width, float height, unsigned int color = White);

	/**
	 Draw a scaled filled point, i.e. 1 or more pixel dot.
	 Use drawCircle for anything more than 2-3 pixes to get a
	 smoot circle
	 Parameters:
		x		- horizontal center
		y		- vertical center
		size	- of point in pixels (default=1)
		color	- fill color (default=White)
		smooth	- smooth edges of circle as best as possible (default=true)
	 Returns:
		void
	*/
	void drawPoint(float x, float y, float size = 1, unsigned int color = White, bool smooth = true);

	/**
	 Draw a 4 sided filled block
	 Parameters:
		x1		- left side coordinate for point 1
		y1		- bottom coordinate for point 1
		x2		- left side coordinate for point 2
		y2		- bottom coordinate for point 2
		width	- of line in pixels
		color	- fill color (default=White)
		smooth	- smooth edges angled lines as best as possible (default=true)
	 Returns:
		void
	*/
	void drawLine(float x1, float y1, float x2, float y2, float width = 1, unsigned int color = White, bool smooth = true);

	/**
	 Draw a filled circle made up of a triangle-fan.  360 triangles will
	 produce a smooth circle.  6 triangles will produce a hexagon.  etc.
	 Parameters:
		x		- horizontal center
		y		- vertical center
		radius	- of circle in pixels
		color	- fill color (default=White)
		sides	- number of triangles drawn (default=360)
	 Returns:
		void
	*/
	void drawCircle(float x, float y, float radius, unsigned int color = White, int sides = 360);

	/**
	 Draw 8x8 pixel characters as text on the screen
	 Parameters:
		x		- left side of first character
		y		- bottom of of characters
		text	- string of characters to draw
		size	- multiplier for size of characters (default=1), i.e 2=16x16
		color	- fill color (default=White)
	 Returns:
		void
	*/
	void drawText(float x, float y, std::string text, int size = 1, unsigned int color = White);


	const uint8_t CHARACTERS[][8] = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x60,0x60,0x60,0x60,0x00,0x60,0x60},
	{0x00,0x6c,0x6c,0x6c,0x00,0x00,0x00,0x00},
	{0x00,0x6c,0x6c,0xfe,0x6c,0xfe,0x6c,0x6c},
	{0x00,0x30,0x7c,0xc0,0x78,0x0c,0xf8,0x30},
	{0x00,0x00,0xc6,0xcc,0x18,0x30,0x66,0xc6},
	{0x00,0x38,0x6c,0x38,0x76,0xdc,0xcc,0x76},
	{0x00,0x60,0x60,0xc0,0x00,0x00,0x00,0x00},
	{0x00,0x18,0x30,0x60,0x60,0x60,0x30,0x18},
	{0x00,0x60,0x30,0x18,0x18,0x18,0x30,0x60},
	{0x00,0x00,0x66,0x3c,0xff,0x3c,0x66,0x00},
	{0x00,0x00,0x30,0x30,0xfc,0x30,0x30,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x30},
	{0x60,0x00,0x00,0x00,0xfc,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30},
	{0x00,0x06,0x0c,0x18,0x30,0x60,0xc0,0x80},
	{0x00,0x78,0xcc,0xdc,0xfc,0xec,0xcc,0x78},
	{0x00,0x30,0xf0,0x30,0x30,0x30,0x30,0xfc},
	{0x00,0x78,0xcc,0x0c,0x38,0x60,0xcc,0xfc},
	{0x00,0x78,0xcc,0x0c,0x38,0x0c,0xcc,0x78},
	{0x00,0x1c,0x3c,0x6c,0xcc,0xfe,0x0c,0x0c},
	{0x00,0xfc,0xc0,0xf8,0x0c,0x0c,0xcc,0x78},
	{0x00,0x38,0x60,0xc0,0xf8,0xcc,0xcc,0x78},
	{0x00,0xfc,0xcc,0x0c,0x18,0x30,0x60,0x60},
	{0x00,0x78,0xcc,0xcc,0x78,0xcc,0xcc,0x78},
	{0x00,0x78,0xcc,0xcc,0x7c,0x0c,0x18,0x70},
	{0x00,0x00,0x00,0x30,0x30,0x00,0x30,0x30},
	{0x00,0x00,0x00,0x30,0x30,0x00,0x70,0x30},
	{0x60,0x18,0x30,0x60,0xc0,0x60,0x30,0x18},
	{0x00,0x00,0x00,0xfc,0x00,0xfc,0x00,0x00},
	{0x00,0x60,0x30,0x18,0x0c,0x18,0x30,0x60},
	{0x00,0x78,0xcc,0x0c,0x18,0x30,0x00,0x30},
	{0x00,0x7c,0xc6,0xde,0xde,0xde,0xc0,0x78},
	{0x00,0x30,0x78,0xcc,0xcc,0xfc,0xcc,0xcc},
	{0x00,0xfc,0x66,0x66,0x7c,0x66,0x66,0xfc},
	{0x00,0x3c,0x66,0xc0,0xc0,0xc0,0x66,0x3c},
	{0x00,0xfc,0x6c,0x66,0x66,0x66,0x6c,0xfc},
	{0x00,0xfe,0x62,0x68,0x78,0x68,0x62,0xfe},
	{0x00,0xfe,0x62,0x68,0x78,0x68,0x60,0xf0},
	{0x00,0x3c,0x66,0xc0,0xc0,0xce,0x66,0x3e},
	{0x00,0xcc,0xcc,0xcc,0xfc,0xcc,0xcc,0xcc},
	{0x00,0x78,0x30,0x30,0x30,0x30,0x30,0x78},
	{0x00,0x1e,0x0c,0x0c,0x0c,0xcc,0xcc,0x78},
	{0x00,0xe6,0x66,0x6c,0x78,0x6c,0x66,0xe6},
	{0x00,0xf0,0x60,0x60,0x60,0x62,0x66,0xfe},
	{0x00,0xc6,0xee,0xfe,0xd6,0xc6,0xc6,0xc6},
	{0x00,0xc6,0xe6,0xf6,0xde,0xce,0xc6,0xc6},
	{0x00,0x38,0x6c,0xc6,0xc6,0xc6,0x6c,0x38},
	{0x00,0xfc,0x66,0x66,0x7c,0x60,0x60,0xf0},
	{0x00,0x78,0xcc,0xcc,0xcc,0xdc,0x78,0x1c},
	{0x00,0xfc,0x66,0x66,0x7c,0x78,0x6c,0xe6},
	{0x00,0x78,0xcc,0xe0,0x38,0x1c,0xcc,0x78},
	{0x00,0xfc,0xb4,0x30,0x30,0x30,0x30,0x78},
	{0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xfc},
	{0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0x78,0x30},
	{0x00,0xc6,0xc6,0xc6,0xd6,0xfe,0xee,0xc6},
	{0x00,0xc6,0xc6,0x6c,0x38,0x6c,0xc6,0xc6},
	{0x00,0xcc,0xcc,0xcc,0x78,0x30,0x30,0x78},
	{0x00,0xfe,0xcc,0x98,0x30,0x62,0xc6,0xfe},
	{0x00,0x78,0x60,0x60,0x60,0x60,0x60,0x78},
	{0x00,0x60,0x30,0x18,0x0C,0x06,0x03,0x01},
	{0x00,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c},
	{0x00,0x00,0x10,0x10,0x28,0x44,0x00,0x00},
	{0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00}
	};

} // namespace fgcugl


#endif // FGCUGL_H
